//***************************************************************************
// Copyright (c) 2021 for information on the respective copyright owner
// see the NOTICE file and/or the following repository:
//     https://github.com/boschglobal/automotive-bus-schema
//
// SPDX-License-Identifier: Apache-2.0
//***************************************************************************


/**
    IDL for Automotive Bus - Register Interface - CAN
    =================================================

    MIME Type : application/x-automotive-bus; interface=register; type=can;
    Flatbuffers file identifier : RICA
*/


namespace AutomotiveBus.Register.Can;


/**
    L2 CAN Bus Model
    ================
*/
enum BusState:byte {
    // L2 Bus Status.
    BusOff = 0,
    Idle = 1,
    Sync = 2
}

table CanStatus {
    sync:BusState = Idle;
}

struct TimeSpec {
    // Used for timestamps and simulation time.
    psec10:long;            // Number of tens of picoseconds (resolution 1e-11 second).
}

struct MessageTiming {
    // Set of timestamps describing the entire timing of a message.
    send_request:TimeSpec;  // Timestamp  of send request (virtual time).
    arbitration:TimeSpec;   // /imestamp  of message arbitration (virtual time).
    reception:TimeSpec;     // Timestamp  of message reception (virtual time).
}


/**
    L3 CAN Bus Model
    ================
*/
enum BufferDirection:byte {
    // Direction of a CAN Buffer.
    Tx = 0,
    Rx = 1
}

enum BufferStatus:byte {
    // Status of a CAN Buffer.
    None = 0,
    RxError = 1
}

enum FrameType:byte{
    StandardFrame = 0,  // Classical CAN, payload up to 8 bytes.
    ExtendedFrame = 1   // CAN FD, payload up to 64 bytes.
}

table Frame {
    // CAN Frame.
    frame_id:uint;      // CAN Message ID.
    payload:[ubyte];    // Payload of the CAN frame, covered by DLC. Can be
                        // longer than the payload length specified by DLC, but
                        // must not be shorter.
    length:ubyte;       // Length of payload content possible values as
                        // defined by CAN DLC spec: 0...8,12,16,20,24,32,48,64.
    rtr:bool;           // Indicates a Remote Frame request.
    frame_type:FrameType = StandardFrame;
}

table MetaFrame {
    // Frame + meta information from/to interface.
    status:BufferStatus;
    direction:BufferDirection = Tx;
    can_fd_enabled:bool;    // CanFD enabled.
    frame:Frame;            // The frame itself.
    timing:MessageTiming;   // Timing of the message.
}


/**
    CAN Register File
    =================
*/
table RegisterFile {
    // The register file is expected to operate in FIFO mode.
    buffer:[MetaFrame];     // Buffer of MetaFrames.
}

root_type RegisterFile;
file_identifier "RICA";
file_extension "can";
