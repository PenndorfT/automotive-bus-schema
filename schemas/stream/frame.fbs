//***************************************************************************
// Copyright (c) 2022 for information on the respective copyright owner
// see the NOTICE file and/or the following repository:
//     https://github.com/boschglobal/automotive-bus-schema
//
// SPDX-License-Identifier: Apache-2.0
//***************************************************************************



/**
    IDL for Automotive Bus - Stream Interface - Frames
    ==================================================

    MIME Type : application/x-automotive-bus; interface=stream; type=frame;
    Flatbuffers file identifier : SFRA
*/


namespace AutomotiveBus.Stream.Frame;


table Timing {
    // All values are nanoseconds from simulation start time (i.e. from 0.0).
    send:long;          // Timestamp when a Frame is sent to the a Bus
                        // Interface for (later) transmission.
    arbitration:long;   // Timestamp when a Frame is transmitted over the
                        // Bus medium (i.e. message arbitration).
    recv:long;          // Timestamp when a Frame is received from a
                        // Bus Interface and consumed.
}

enum CanFrameType:byte{
    StandardFrame = 0,  // Classical CAN, payload up to 8 bytes.
    ExtendedFrame = 1   // CAN FD, payload up to 64 bytes.
}

table CanFrame {
    frame_id:uint;      // CAN Message ID.
    payload:[ubyte];    // Payload of the CAN frame, covered by DLC. Can be
                        // longer than the payload length specified by DLC, but
                        // must not be shorter.
    length:ubyte;       // Length of payload content possible values as
                        // defined by CAN DLC spec:
                        //      Standard frame: 0...8
                        //      Extended frame: 0...8,12,16,20,24,32,48,64.
    frame_type:CanFrameType = StandardFrame;

    // CAN Frame Metadata
    bus_id:uint;        // CAN Bus ID (logical identifier).
    node_id:uint;       // ECU ID for the node _sending_ this Frame.
    interface_id:uint;  // Interface ID of the node interface _sending_ this Frame.
    timing:Timing;      // Timing of the frame.
}

union FrameTypes {
    CanFrame:CanFrame,
}

table Frame {
    f:FrameTypes;       // Workaround as Vectors of Unions is not fully supported.
}

table Stream {
    frames:[Frame];     // Vector of Frames.
}

root_type Stream;
file_identifier "SFRA"; // Stream of FRAmes.
